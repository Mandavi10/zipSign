<div id="pdf-container">
    <canvas id="pdfCanvas"></canvas>
    <div id="page-controls">
        <button id="enableRectangleBtn">Enable Rectangle</button>
        <button id="prevPageBtn">Previous Page</button>
        <span>Page <span id="pageNumber">1</span> of <span id="totalPages">1</span></span>
        <button id="nextPageBtn">Next Page</button>
    </div>
</div>
<style>
    #pdf-container {
        position: relative;
        width: 500px;
        height: 500px;
        border: 1px solid #ccc;
        box-shadow: 0 0 5px #ccc;
    }

    #pdfCanvas {
        width: 150%;
        height: 117%;
        overflow: hidden;
        border: 1px solid #ccc;
    }

    #page-controls {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 30px;
        background-color: #fff;
        border: 1px solid #ccc;
    }

    #prevPageBtn,
    #enableRectangleBtn,
    #nextPageBtn {
        float: left;
        margin: 5px;
        font-family: sans-serif;
    }
    #pageNumber,
    #totalPages {
        float: right;
        margin: 5px;
        font-family: sans-serif;
    }
</style>
@*<button id="enableRectangleBtn">Enable Rectangle</button>
    <canvas id="pdfCanvas"></canvas>
    <div id="page-controls">
        <button id="prevPageBtn">Previous Page</button>
        <span>Page <span id="pageNumber">1</span> of <span id="totalPages">1</span></span>
        <button id="nextPageBtn">Next Page</button>
    </div>*@
<script src="https://unpkg.com/pdfjs-dist/build/pdf.js"></script>
<script>
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://unpkg.com/pdfjs-dist/build/pdf.worker.js';
    var pdfUrl = '@Url.Content("~/2 Page Invoice SHF_20231018110546456_Z2950YE9N_signedFinal.pdf")';
    var canvas = document.getElementById('pdfCanvas');
    var context = canvas.getContext('2d');
    var pdf;
    var currentPageNumber = 1;
    var totalPages = 1;
    var isRectangleEnabled = false;
    var rectangles = [];
    document.getElementById('enableRectangleBtn').addEventListener('click', function () {
        isRectangleEnabled = !isRectangleEnabled;
    });

    document.getElementById('prevPageBtn').addEventListener('click', function () {
        if (currentPageNumber > 1) {
            currentPageNumber--;
            renderPage(currentPageNumber);
        }
    });
    document.getElementById('nextPageBtn').addEventListener('click', function () {
        if (currentPageNumber < totalPages) {
            currentPageNumber++;
            renderPage(currentPageNumber);
        }
    });
    function renderPage(pageNumber) {
        context.clearRect(0, 0, canvas.width, canvas.height);
        pdf.getPage(pageNumber).then(function (page) {
            var viewport = page.getViewport({ scale: 1 });
            canvas.width = viewport.width;
            canvas.height = viewport.height;

            var renderContext = {
                canvasContext: context,
                viewport: viewport
            };
            page.render(renderContext).promise.then(function () {
                rectangles.forEach(function (rect) {
                    context.strokeStyle = 'red';
                    context.lineWidth = 2;
                    context.strokeRect(rect.startX, rect.startY, rect.width, rect.height);
                });
            });
        });
        document.getElementById('pageNumber').textContent = pageNumber;
    }
    pdfjsLib.getDocument(pdfUrl).promise.then(function (pdfDoc) {
        pdf = pdfDoc;
        totalPages = pdfDoc.numPages;
        renderPage(currentPageNumber);
    });
    canvas.addEventListener('mousedown', function (e) {
        if (!isRectangleEnabled) return;

        var canvasRect = canvas.getBoundingClientRect();
        var scaleX = canvas.width / canvasRect.width;
        var scaleY = canvas.height / canvasRect.height;

        var rect = {
            startX: (e.clientX - canvasRect.left) * scaleX,
            startY: (e.clientY - canvasRect.top) * scaleY,
            width: 0,
            height: 0
        };
        rectangles.push(rect);

        var drag = function (e) {
            rect.width = ((e.clientX - canvasRect.left) * scaleX) - rect.startX;
            rect.height = ((e.clientY - canvasRect.top) * scaleY) - rect.startY;
            drawRectangles();
        };

        var stopDrag = function () {
            document.removeEventListener('mousemove', drag);
            document.removeEventListener('mouseup', stopDrag);
            sendRectangleData(currentPageNumber, rect);
        };

        document.addEventListener('mousemove', drag);
        document.addEventListener('mouseup', stopDrag);
    });
    function drawRectangles() {
        context.clearRect(0, 0, canvas.width, canvas.height);
        renderPage(currentPageNumber);
        // Draw existing rectangles
        rectangles.forEach(function (rect) {
            context.strokeStyle = 'red';
            context.lineWidth = 2;
            context.strokeRect(rect.startX, rect.startY, rect.width, rect.height);
        });
    }
    function sendRectangleData(pageNumber, rect) {
        pdf.getPage(pageNumber).then(function (page) {
            var viewport = page.getViewport({ scale: 1 });
            var pdfX = viewport.width - ((rect.startX / canvas.width) * viewport.width) - ((rect.width / canvas.width) * viewport.width);
            var pdfY = viewport.height - ((rect.startY / canvas.height) * viewport.height) - ((rect.height / canvas.height) * viewport.height);
            var pdfWidth = (rect.width / canvas.width) * viewport.width;
            var pdfHeight = (rect.height / canvas.height) * viewport.height;
            // Send rectangle data to the server using PDF coordinates
            $.ajax({
                type: 'POST',
                url: '/zipSign/SaveRectangleData', // Replace with the correct URL of your controller action
                data: {
                    pageNumber: pageNumber,
                    pdfX: pdfX,
                    pdfY: pdfY,
                    pdfWidth: pdfWidth,
                    pdfHeight: pdfHeight
                },
                success: function (response) {
                    console.log('Rectangle data saved successfully:', response);
                },
                error: function (error) {
                    console.error('Error saving rectangle data:', error);
                }
            });
        });
    }
</script>
@*<script src="~/JavaScript/Upload.js"></script>*@
